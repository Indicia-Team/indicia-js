{"version":3,"file":"indicia.min.js","sources":["../src/Store.js","../src/Collection.js","../src/constants.js","../src/helpers.js","../src/sync_helpers.js","../src/Media.js","../src/Occurrence.js","../src/Sample.js","../src/main.js","../src/Report.js"],"sourcesContent":["import Backbone from 'backbone';\nimport LocalForage from 'localforage';\n\n/*!\n Inspired by localForage Backbone Adapter\n */\n\n// For now, we aren't complicated: just set a property off Backbone to\n// serve as our export point.\nclass Store {\n  constructor(options = {}) {\n    const that = this;\n\n    // initialize db\n    this.localForage = null;\n    this.ready = new Promise((resolve, reject) => {\n      // check custom drivers (eg. SQLite)\n      const customDriversPromise = new Promise((_resolve) => {\n        if (options.driverOrder && typeof options.driverOrder[0] === 'object') {\n          LocalForage.defineDriver(options.driverOrder[0]).then(_resolve);\n        } else {\n          _resolve();\n        }\n      });\n\n      // config\n      customDriversPromise.then(() => {\n        const dbConfig = {\n          name: options.name || 'indicia',\n          storeName: options.storeName || 'models',\n        };\n\n        if (options.version) {\n          dbConfig.version = options.version;\n        }\n\n        const driverOrder = options.driverOrder || ['indexeddb', 'websql', 'localstorage'];\n        const drivers = Store._getDriverOrder(driverOrder);\n        const DB = options.LocalForage || LocalForage;\n\n        // init\n        that.localForage = DB.createInstance(dbConfig);\n        that.localForage\n          .setDriver(drivers)\n          .then(() => {\n            resolve(that.localForage);\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  static _getDriverOrder(driverOrder) {\n    return driverOrder.map((driver) => {\n      switch (driver) {\n        case 'indexeddb':\n          return LocalForage.INDEXEDDB;\n        case 'websql':\n          return LocalForage.WEBSQL;\n        case 'localstorage':\n          return LocalForage.LOCALSTORAGE;\n        default:\n          // custom\n          if (typeof driver === 'object' && driver._driver) {\n            return driver._driver;\n          }\n          return console.error('No such db driver!');\n      }\n    });\n  }\n\n  sync(method, model, options) {\n    switch (method) {\n      case 'read':\n        return model.cid ? this.find(model, options) : this.findAll(model, options);\n      case 'create':\n        return this.create(model, options);\n      case 'update':\n        return this.update(model, options);\n      case 'delete':\n        return this.destroy(model, options);\n      default:\n        return Promise.reject(new Error(`Local Sync method not found ${method}`));\n    }\n  }\n\n  save(model, options) {\n    return this._callWhenReady(() => {\n      // save collection\n      if (model instanceof Backbone.Collection) {\n        if (!model.models.length) {\n          return Promise.resolve();\n        }\n\n        const toWait = [];\n        _.each(model.models, (collectionModel) => {\n          if (collectionModel.store) toWait.push(collectionModel.save(null, options));\n        });\n        return Promise.all(toWait);\n      }\n\n      // early return if no id or cid\n      if (!model.id && !model.cid) {\n        return Promise.reject(new Error('Invalid model passed to store'));\n      }\n\n      const key = model.cid;\n      return this.localForage.setItem(key, model.toJSON()).then(() => Promise.resolve()); // don't return anything to update the model\n    });\n  }\n\n  create(model, options) {\n    // We always have an ID available by this point, so we just call\n    // the update method.\n    return this.update(model, options);\n  }\n\n  update(model, options) {\n    return this.save(model, options);\n  }\n\n  find(model) {\n    return this._callWhenReady(() =>\n      // eslint-disable-line\n      this.localForage.getItem(model.cid).then((data) => {\n        if (!data) {\n          return Promise.reject(`LocalForage entry with ${model.cid} as key not found`);\n        }\n        return data;\n      })\n    );\n  }\n\n  // Only used by `Backbone.Collection#sync`.\n  findAll() {\n    return this._callWhenReady(() => {\n      // build up samples\n      const models = [];\n      return this.localForage\n        .iterate((value) => {\n          models.push(value);\n        })\n        .then(() => Promise.resolve(models));\n    });\n  }\n\n  destroy(model) {\n    return this._callWhenReady(() => {\n      // collection destroy\n      if (model instanceof Backbone.Collection) {\n        if (!model.models.length) {\n          return Promise.resolve();\n        }\n\n        const toWait = [];\n        // need to clone:\n        // http://stackoverflow.com/questions/10858935/cleanest-way-to-destroy-every-model-in-a-collection-in-backbone\n        _.each(_.clone(model.models), (collectionModel) => {\n          if (collectionModel.store) toWait.push(collectionModel.destroy());\n        });\n        return Promise.all(toWait);\n      }\n\n      // early return if no id or cid\n      if (!model.id && !model.cid) {\n        return Promise.reject(new Error('Invalid model passed to store'));\n      }\n\n      const key = model.cid;\n      return this.localForage.removeItem(key).then(() => Promise.resolve(model.toJSON()));\n    });\n  }\n\n  _callWhenReady(func) {\n    const that = this;\n    return this.ready.then(() => func.bind(that)());\n  }\n}\n\nexport default Store;\n","/** *********************************************************************\n * COLLECTION MODULE\n **********************************************************************/\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport Store from './Store';\n\nconst Collection = Backbone.Collection.extend({\n  constructor(attributes = {}, options = {}) {\n    this.store = options.store || this.store || new Store();\n\n    if (!options.model && !this.model) {\n      console.error(\"Collection's model must be provided\");\n      return;\n    }\n\n    Backbone.Collection.prototype.constructor.apply(this, arguments);\n  },\n\n  comparator(a) {\n    return a.metadata.created_on;\n  },\n\n  size() {\n    return Promise.resolve(this.length);\n  },\n\n  /**\n   * New function to save all models within the collection.\n   * @param models\n   * @param options\n   */\n  save(collection, options) {\n    return this.sync('create', collection || this, options);\n  },\n\n  /**\n   * New function to destroy all models within the collection.\n   * @returns {*}\n   */\n  destroy(collection, options) {\n    return this.sync('delete', collection || this, options);\n  },\n\n  /**\n   * New function to fetch all models within the collection.\n   * @returns {*}\n   */\n  fetch(options) {\n    options = _.extend({ parse: true }, options);\n    const collection = this;\n\n    return this.sync('read', this, options).then((resp) => {\n      const method = options.reset ? 'reset' : 'set';\n\n      collection[method](resp, options);\n      try {\n        collection.trigger('sync', collection, resp, options);\n      } catch (e) {\n        /* continue on listener error */\n      }\n    });\n  },\n\n  /**\n   * Synchronises the collection.\n   * @param method\n   * @param model\n   * @param options\n   */\n  sync(method, collection, options = {}) {\n    if (options.remote) {\n      return this._syncRemote(method, collection, options);\n    }\n\n    if (!this.store) {\n      return Promise.reject(new Error('Trying to locally sync a collection without a store'));\n    }\n\n    try {\n      this.trigger('request', collection, null, options);\n    } catch (e) {\n      /* continue on listener error */\n    }\n    return this.store.sync(method, collection, options);\n  },\n\n  /**\n   * Syncs the collection to the remote server.\n   * Returns on success: model, response, options\n   */\n  _syncRemote(method, collection, options) {\n    collection.synchronising = true;\n\n    // model.trigger('request', model, xhr, options);\n    switch (method) {\n      case 'create':\n        if (!collection.models.length) {\n          return Promise.resolve();\n        }\n        const toWait = [];\n        _.each(collection.models, (model) => {\n          if (model.store) toWait.push(model.save(null, options));\n        });\n        return Promise.all(toWait);\n\n      case 'update':\n        // todo\n        collection.synchronising = false;\n        return Promise.reject(new Error('Updating the model is not possible yet.'));\n\n      case 'read':\n        // todo\n        collection.synchronising = false;\n        return Promise.reject(new Error('Reading the model is not possible yet.'));\n\n      case 'delete':\n        // todo\n        collection.synchronising = false;\n        return Promise.reject(new Error('Deleting the model is not possible yet.'));\n\n      default:\n        collection.synchronising = false;\n        return Promise.reject(new Error(`No such remote sync option: ${method}`));\n    }\n  },\n\n  /**\n   * Returns an object with attributes and their values\n   * mapped for warehouse submission.\n   *\n   * @returns {*}\n   */\n  _getSubmission(options) {\n    const submission = [];\n    let media = [];\n\n    // transform its models\n    this.models.forEach((model) => {\n      const [modelSubmission, modelMedia] = model._getSubmission(options);\n      submission.push(modelSubmission);\n      media = media.concat(modelMedia);\n    });\n\n    return [submission, media];\n  },\n\n  // Prepare a hash of attributes (or other model) to be added to this\n  // collection.\n  _prepareModel(options) {\n    if (this._isModel(options)) {\n      if (!options.collection) options.collection = this;\n      return options;\n    }\n\n    const attrs = options.attributes;\n\n    options = options ? _.clone(options) : {};\n    options.collection = this;\n    options.store = this.store;\n    const model = new this.model(attrs, options); // eslint-disable-line\n    if (!model.validationError) return model;\n    this.trigger('invalid', this, model.validationError, options);\n    return false;\n  },\n});\n\nexport { Collection as default };\n","/* eslint-disable */\nexport const API_BASE = 'api/',\n  API_VER = 'v1',\n  API_SAMPLES_PATH = '/samples',\n  API_REPORTS_PATH = '/reports',\n  SYNCHRONISING = 0,\n  SYNCED = 1,\n  LOCAL = 2,\n  SERVER = 3,\n  CHANGED_LOCALLY = 4,\n  CHANGED_SERVER = 5,\n  CONFLICT = -1;\n","/** *********************************************************************\n * HELPER FUNCTIONS\n **********************************************************************/\n\n/**\n * Generate UUID.\n */\nconst getNewUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n\n    return v.toString(16);\n  });\n\n/**\n * Converts DataURI object to a Blob.\n *\n * @param {type} dataURI\n * @param {type} fileType\n * @returns {undefined}\n */\nconst dataURItoBlob = (dataURI, fileType) => {\n  const binary = atob(dataURI.split(',')[1]);\n  const array = [];\n  for (let i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n  return new Blob([new Uint8Array(array)], {\n    type: fileType,\n  });\n};\n\n// Detecting data URLs\n// https://gist.github.com/bgrins/6194623\n\n// data URI - MDN https://developer.mozilla.org/en-US/docs/data_URIs\n// The 'data' URL scheme: http://tools.ietf.org/html/rfc2397\n// Valid URL Characters: http://tools.ietf.org/html/rfc2396#section2\nconst isDataURL = (string) => {\n  if (!string) {\n    return false;\n  }\n  const normalized = string.toString(); // numbers\n\n  const regex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z\\-]+\\=[a-z\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i;\n  return !!normalized.match(regex);\n};\n\n// From jQuery 1.4.4 .\nconst isPlainObject = (obj) => {\n  function type(obj) {\n    const class2type = {};\n    const types = 'Boolean Number String Function Array Date RegExp Object'.split(' ');\n    for (let i = 0; i < types.length; i++) {\n      class2type[`[object ${types[i]}]`] = types[i].toLowerCase();\n    }\n    return obj == null ? String(obj) : class2type[toString.call(obj)] || 'object';\n  }\n\n  function isWindow(obj) {\n    return obj && typeof obj === 'object' && 'setInterval' in obj;\n  }\n\n  // Must be an Object.\n  // Because of IE, we also have to check the presence of the constructor property.\n  // Make sure that DOM nodes and window objects don't pass through, as well\n  if (!obj || type(obj) !== 'object' || obj.nodeType || isWindow(obj)) {\n    return false;\n  }\n\n  // Not own constructor property must be Object\n  if (\n    obj.constructor &&\n    !hasOwn.call(obj, 'constructor') &&\n    !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')\n  ) {\n    return false;\n  }\n\n  // Own properties are enumerated firstly, so to speed up,\n  // if last one is own, then all properties are own.\n\n  let key;\n  for (key in obj) {\n  }\n\n  return key === undefined || hasOwn.call(obj, key);\n};\n\n// checks if the object has any elements.\nconst isEmptyObject = (obj) => {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Formats the date to Indicia Warehouse format.\n * @param date String or Date object\n * @returns String formatted date\n */\nconst formatDate = (dateToFormat) => {\n  let date = dateToFormat;\n  let now = new Date();\n  let day = 0;\n  let month = 0;\n  const reg = /\\d{2}\\/\\d{2}\\/\\d{4}$/;\n  const regDash = /\\d{4}-\\d{1,2}-\\d{1,2}$/;\n  const regDashInv = /\\d{1,2}-\\d{1,2}-\\d{4}$/;\n  let dateArray = [];\n\n  if (typeof date === 'string') {\n    dateArray = date.split('-');\n    // check if valid\n    if (reg.test(date)) {\n      return date;\n      // dashed\n    } else if (regDash.test(date)) {\n      date = new Date(\n        window.parseInt(dateArray[0]),\n        window.parseInt(dateArray[1]) - 1,\n        window.parseInt(dateArray[2])\n      );\n      // inversed dashed\n    } else if (regDashInv.test(date)) {\n      date = new Date(\n        window.parseInt(dateArray[2]),\n        window.parseInt(dateArray[1]) - 1,\n        window.parseInt(dateArray[0])\n      );\n    }\n  }\n\n  now = date || now;\n  day = `0${now.getDate()}`.slice(-2);\n  month = `0${now.getMonth() + 1}`.slice(-2);\n\n  return `${day}/${month}/${now.getFullYear()}`;\n};\n\nexport default {\n  getNewUUID,\n  dataURItoBlob,\n  isDataURL,\n  isPlainObject,\n  isEmptyObject,\n  formatDate,\n};\n","import _ from 'underscore';\n\nconst helpers = {\n  save(key, val, options) {\n    const model = this;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let attrs;\n    if (key == null || typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options = _.extend({ validate: true, parse: true }, options);\n    const wait = options.wait;\n\n    // If we're not waiting and attributes exist, save acts as\n    // `set(attr).save(null, opts)` with validation. Otherwise, check if\n    // the model will be valid when the attributes, if any, are set.\n    if (attrs && !wait) {\n      if (!this.set(attrs, options)) return false;\n    } else if (!this._validate(attrs, options)) {\n      return false;\n    }\n\n    // After a successful server-side save, the client is (optionally)\n    // updated with the server-side state.\n    const attributes = model.attributes;\n\n    // Set temporary attributes if `{wait: true}` to properly find new ids.\n    if (attrs && wait) model.attributes = _.extend({}, attributes, attrs);\n\n    let method = 'create';\n    if (!model.isNew() && options.remote) {\n      method = options.patch ? 'patch' : 'update';\n    }\n    if (method === 'patch' && !options.attrs) options.attrs = attrs;\n\n    // parent save\n    if (model.parent && !options.remote) {\n      return model.parent\n        .save(key, val, options)\n        .then(() => {\n          // Ensure attributes are restored during synchronous saves.\n          model.attributes = attributes;\n          try {\n            model.trigger('sync', model, null, options);\n          } catch (e) {\n            /* continue on listener error */\n          }\n          return model;\n        })\n        .catch((err) => {\n          try {\n            model.trigger('error', err);\n          } catch (e) {\n            /* continue on listener error */\n          }\n          return Promise.reject(err);\n        });\n    }\n\n    // model save\n    return model\n      .sync(method, model, options)\n      .then((resp) => {\n        if (options.remote) {\n          // update the model and occurrences with new remote IDs\n          model._remoteCreateParse(model, resp.data);\n\n          // update metadata\n          const timeNow = new Date();\n          model.metadata.server_on = timeNow;\n          model.metadata.updated_on = timeNow;\n          model.metadata.synced_on = timeNow;\n\n          // Ensure attributes are restored during synchronous saves.\n          model.attributes = attributes;\n\n          // save model's changes locally\n          return model.save().then(() => {\n            try {\n              model.trigger('sync:remote', model, resp, options);\n            } catch (e) {\n              /* continue on listener error */\n            }\n            return model;\n          });\n        }\n\n        try {\n          model.trigger('sync', model, resp, options);\n        } catch (e) {\n          /* continue on listener error */\n        }\n        return model;\n      })\n      .catch((err) => {\n        try {\n          model.trigger('error', err);\n        } catch (e) {\n          /* continue on listener error */\n        }\n        return Promise.reject(err);\n      });\n  },\n\n  /**\n   *\n   * @param options\n   * @returns {Promise}\n   */\n  destroy(options = {}) {\n    const model = this;\n    const collection = this.collection; // keep reference for triggering\n\n    const promise = new Promise((fulfill, reject) => {\n      function finalise() {\n        // removes from all collections etc\n        model.stopListening();\n        try {\n          model.trigger('destroy', model, collection, options);\n        } catch (e) {\n          /* continue on listener error */\n        }\n\n        if (!options.noSave) {\n          // parent save the changes permanently\n          model.parent.save(null, options).then(() => {\n            try {\n              model.trigger('sync', model, null, options);\n            } catch (e) {\n              /* continue on listener error */\n            }\n            fulfill(model);\n          });\n        } else {\n          try {\n            model.trigger('sync', model, null, options);\n          } catch (e) {\n            /* continue on listener error */\n          }\n          fulfill(model);\n        }\n      }\n\n      if (model.parent) {\n        if (options.remote) {\n          // destroy remotely\n          model.sync('delete', model, options).then(finalise);\n        } else {\n          finalise();\n        }\n      } else {\n        // destroy locally/remotely\n        model\n          .sync('delete', model, options)\n          .then(() => {\n            // removes from all collections etc\n            model.stopListening();\n            try {\n              model.trigger('destroy', model, collection, options);\n            } catch (e) {\n              /* continue on listener error */\n            }\n            try {\n              model.trigger('sync', model, null, options);\n            } catch (e) {\n              /* continue on listener error */\n            }\n\n            fulfill(model);\n          })\n          .catch(reject);\n      }\n    });\n\n    return promise;\n  },\n};\n\nexport default helpers;\n","/** *********************************************************************\n * IMAGE\n **********************************************************************/\nimport Backbone from 'backbone';\nimport _ from 'underscore';\n\nimport helpers from './helpers';\nimport syncHelpers from './sync_helpers';\n\nconst THUMBNAIL_WIDTH = 100; // px\nconst THUMBNAIL_HEIGHT = 100; // px\n\nconst Media = Backbone.Model.extend({\n  constructor(attributes = {}, options = {}) {\n    let attrs = attributes;\n    if (typeof attributes === 'string') {\n      const data = attributes;\n      attrs = { data };\n      return;\n    }\n\n    this.id = options.id; // remote ID\n    this.cid = options.cid || helpers.getNewUUID();\n    this.setParent(options.parent || this.parent);\n\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n\n    if (options.metadata) {\n      this.metadata = options.metadata;\n    } else {\n      this.metadata = {\n        created_on: new Date(),\n      };\n    }\n\n    this.initialize.apply(this, arguments); // eslint-disable-line\n  },\n\n  /**\n   * Synchronises the model.\n   * @param method\n   * @param model\n   * @param options\n   */\n  sync(method, model, options = {}) {\n    if (options.remote) {\n      return this._syncRemote(method, model, options);\n    }\n\n    return Promise.reject(new Error('Local sync is not possible yet.'));\n  },\n\n  /**\n   * Syncs the record to the remote server.\n   * Returns on success: model, response, options\n   */\n  _syncRemote() {\n    return Promise.reject(new Error('Remote sync is not possible yet.'));\n  },\n\n  /**\n   * Returns image's absolute URL or dataURI.\n   */\n  getURL() {\n    return this.get('data');\n  },\n\n  /**\n   * Sets parent.\n   * @param parent\n   */\n  setParent(parent) {\n    if (!parent) return;\n\n    const that = this;\n    this.parent = parent;\n    this.parent.on('destroy', () => {\n      that.destroy({ noSave: true });\n    });\n  },\n\n  /**\n   * Resizes itself.\n   */\n  resize(MAX_WIDTH, MAX_HEIGHT) {\n    const that = this;\n    const promise = new Promise((fulfill, reject) => {\n      Media.resize(this.getURL(), this.get('type'), MAX_WIDTH, MAX_HEIGHT)\n        .then((args) => {\n          const [image, data] = args;\n          that.set('data', data);\n          fulfill([image, data]);\n        })\n        .catch(reject);\n    });\n    return promise;\n  },\n\n  /**\n   * Adds a thumbnail to image model.\n   * @param options\n   */\n  addThumbnail(options = {}) {\n    const that = this;\n\n    const promise = new Promise((fulfill, reject) => {\n      // check if data source is dataURI\n      const re = /^data:/i;\n      if (re.test(this.getURL())) {\n        Media.resize(\n          this.getURL(),\n          this.get('type'),\n          THUMBNAIL_WIDTH || options.width,\n          THUMBNAIL_WIDTH || options.width\n        )\n          .then((args) => {\n            const [, data] = args;\n            that.set('thumbnail', data);\n            fulfill();\n          })\n          .catch(reject);\n        return;\n      }\n\n      Media.getDataURI(this.getURL(), {\n        width: THUMBNAIL_WIDTH || options.width,\n        height: THUMBNAIL_HEIGHT || options.height,\n      })\n        .then((data) => {\n          that.set('thumbnail', data[0]);\n          fulfill();\n        })\n        .catch(reject);\n    });\n\n    return promise;\n  },\n\n  // overwrite if you want to validate before saving remotely\n  validate(attributes, options = {}) {\n    if (options.remote) {\n      return this.validateRemote(attributes, options);\n    }\n    return null;\n  },\n\n  validateRemote(attributes) {\n    const attrs = _.extend({}, this.attributes, attributes);\n    const errors = {};\n\n    // type\n    if (!attrs.data) {\n      errors.attributes || (errors.attributes = {});\n      errors.attributes.data = \"can't be empty\";\n    }\n\n    if (!attrs.type) {\n      errors.attributes || (errors.attributes = {});\n      errors.attributes.type = \"can't be empty\";\n    }\n\n    if (!_.isEmpty(errors)) {\n      return errors;\n    }\n\n    return null;\n  },\n\n  toJSON() {\n    const data = {\n      id: this.id,\n      cid: this.cid,\n      metadata: this.metadata,\n      attributes: this.attributes,\n    };\n    return data;\n  },\n\n  /**\n   * Returns an object with attributes and their values\n   * mapped for warehouse submission.\n   *\n   * @returns {*}\n   */\n  _getSubmission() {\n    const submission = {\n      id: this.id,\n      name: this.cid,\n    };\n\n    return [submission];\n  },\n});\n\n_.extend(Media.prototype, syncHelpers);\n\n_.extend(Media, {\n  /**\n   * Transforms and resizes an image file into a string.\n   * Can accept file image path and a file input file.\n   *\n   * @param onError\n   * @param file\n   * @param onSaveSuccess\n   * @returns {number}\n   */\n  getDataURI(file, options = {}) {\n    const promise = new Promise((fulfill, reject) => {\n      // file paths\n      if (typeof file === 'string') {\n        // get extension\n        let fileType = file.replace(/.*\\.([a-z]+)$/i, '$1');\n        if (fileType === 'jpg') fileType = 'jpeg'; // to match media types image/jpeg\n\n        Media.resize(file, fileType, options.width, options.height).then((args) => {\n          const [image, dataURI] = args;\n          fulfill([dataURI, fileType, image.width, image.height]);\n        });\n        return;\n      }\n\n      // file inputs\n      if (!window.FileReader) {\n        reject(new Error('No File Reader'));\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        if (options.width || options.height) {\n          // resize\n          Media.resize(event.target.result, file.type, options.width, options.height).then((args) => {\n            const [image, dataURI] = args;\n            fulfill([dataURI, file.type, image.width, image.height]);\n          });\n        } else {\n          const image = new window.Image(); // native one\n\n          image.onload = () => {\n            const type = file.type.replace(/.*\\/([a-z]+)$/i, '$1');\n            fulfill([event.target.result, type, image.width, image.height]);\n          };\n          image.src = event.target.result;\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n\n    return promise;\n  },\n\n  /**\n   * http://stackoverflow.com/questions/2516117/how-to-scale-an-image-in-data-uri-format-in-javascript-real-scaling-not-usin\n   * @param data\n   * @param fileType\n   * @param MAX_WIDTH\n   * @param MAX_HEIGHT\n   */\n  resize(data, fileType, MAX_WIDTH, MAX_HEIGHT) {\n    const promise = new Promise((fulfill) => {\n      const image = new window.Image(); // native one\n\n      image.onload = () => {\n        let width = image.width;\n        let height = image.height;\n        const maxWidth = MAX_WIDTH || width;\n        const maxHeight = MAX_HEIGHT || height;\n\n        let res = null;\n\n        // resizing\n        if (width > height) {\n          res = width / maxWidth;\n        } else {\n          res = height / maxHeight;\n        }\n\n        width /= res;\n        height /= res;\n\n        // Create a canvas with the desired dimensions\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n\n        // Scale and draw the source image to the canvas\n        canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n        // Convert the canvas to a data URL in some format\n        fulfill([image, canvas.toDataURL(fileType)]);\n      };\n\n      image.src = data;\n    });\n\n    return promise;\n  },\n});\n\nexport { Media as default };\n","/** *********************************************************************\n * OCCURRENCE\n **********************************************************************/\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport $ from 'jquery';\nimport helpers from './helpers';\nimport syncHelpers from './sync_helpers';\nimport Media from './Media';\nimport Collection from './Collection';\n\nconst Occurrence = Backbone.Model.extend({\n  Media,\n\n  constructor(attributes = {}, options = {}) {\n    const that = this;\n    let attrs = attributes;\n\n    this.id = options.id; // remote ID\n    this.cid = options.cid || helpers.getNewUUID();\n    this.setParent(options.parent || this.parent);\n\n    this.keys = options.keys || this.keys; // warehouse attribute keys\n\n    if (options.Media) this.Media = options.Media;\n\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n\n    this.metadata = this._getDefaultMetadata(options);\n\n    if (options.media) {\n      const mediaArray = [];\n      _.each(options.media, (media) => {\n        if (media instanceof this.Media) {\n          media.setParent(that);\n          mediaArray.push(media);\n        } else {\n          const modelOptions = _.extend(media, { parent: that });\n          mediaArray.push(new this.Media(media.attributes, modelOptions));\n        }\n      });\n      this.media = new Collection(mediaArray, {\n        model: this.Media,\n      });\n    } else {\n      this.media = new Collection([], {\n        model: this.Media,\n      });\n    }\n\n    this.initialize.apply(this, arguments); // eslint-disable-line\n  },\n\n  /**\n   * Sets parent.\n   * todo: move to private _space\n   * @param parent\n   */\n  setParent(parent) {\n    if (!parent) return;\n\n    const that = this;\n    this.parent = parent;\n    this.parent.on('destroy', () => {\n      that.destroy({ noSave: true });\n    });\n  },\n\n  /**\n   * Adds an media to occurrence and sets the medias's parent to this.\n   * @param media\n   */\n  addMedia(mediaObj) {\n    if (!mediaObj) return;\n    mediaObj.setParent(this);\n    this.media.add(mediaObj);\n  },\n\n  /**\n   * Returns child media.\n   * @param index\n   * @returns {*}\n   */\n  getMedia(index = 0) {\n    return this.media.at(index);\n  },\n\n  // overwrite if you want to validate before saving remotely\n  validate(attributes, options = {}) {\n    if (options.remote) {\n      return this.validateRemote(attributes, options);\n    }\n    return null;\n  },\n\n  validateRemote(attributes) {\n    const attrs = _.extend({}, this.attributes, attributes);\n    const media = {};\n\n    const modelErrors = {};\n\n    // location\n    if (!attrs.taxon) {\n      modelErrors.taxon = \"can't be blank\";\n    }\n\n    // media\n    if (this.media.length) {\n      this.media.each((mediaModel) => {\n        const errors = mediaModel.validateRemote();\n        if (errors) {\n          const mediaID = mediaModel.cid;\n          media[mediaID] = errors;\n        }\n      });\n    }\n\n    const errors = {};\n    if (!_.isEmpty(media)) {\n      errors.media = media;\n    }\n    if (!_.isEmpty(modelErrors)) {\n      errors.attributes = modelErrors;\n    }\n\n    if (!_.isEmpty(errors)) {\n      return errors;\n    }\n\n    return null;\n  },\n\n  toJSON() {\n    let media;\n    if (!this.media) {\n      media = [];\n      console.warn('toJSON media missing');\n    } else {\n      media = this.media.toJSON();\n    }\n    const data = {\n      id: this.id,\n      cid: this.cid,\n      metadata: this.metadata,\n      attributes: this.attributes,\n      media,\n    };\n    return data;\n  },\n\n  /**\n   * Returns an object with attributes and their values\n   * mapped for warehouse submission.\n   *\n   * @returns {*}\n   */\n  _getSubmission(options = {}) {\n    const that = this;\n    const occKeys = typeof this.keys === 'function' ? this.keys() : this.keys;\n    const keys = $.extend(true, Occurrence.keys, occKeys); // warehouse keys/values to transform\n    const media = [...this.media.models]; // all media within this and child models\n\n    const submission = {\n      id: this.id,\n      external_key: this.cid,\n      fields: {},\n      media: [],\n    };\n\n    if (this.metadata.training || options.training) {\n      submission.training = this.metadata.training || options.training;\n    }\n\n    if (this.metadata.release_status || options.release_status) {\n      submission.release_status = this.metadata.release_status || options.release_status;\n    }\n\n    if (this.metadata.record_status || options.record_status) {\n      submission.record_status = this.metadata.record_status || options.record_status;\n    }\n\n    if (this.metadata.sensitive || options.sensitive) {\n      submission.sensitive = this.metadata.sensitive || options.sensitive;\n    }\n\n    if (this.metadata.confidential || options.confidential) {\n      submission.confidential = this.metadata.confidential || options.confidential;\n    }\n\n    if (this.metadata.sensitivity_precision || options.sensitivity_precision) {\n      submission.sensitivity_precision =\n        this.metadata.sensitivity_precision || options.sensitivity_precision;\n    }\n\n    // transform attributes\n    Object.keys(this.attributes).forEach((attr) => {\n      // no need to send attributes with no values\n      let value = that.attributes[attr];\n      if (!value) return;\n\n      if (!keys[attr]) {\n        if (attr !== 'email') {\n          console.warn(`Indicia: no such key: ${attr}`);\n        }\n        submission.fields[attr] = value;\n        return;\n      }\n\n      const warehouseAttr = keys[attr].id || attr;\n\n      // check if has values to choose from\n      if (keys[attr].values) {\n        if (typeof keys[attr].values === 'function') {\n          // get a value from a function\n          value = keys[attr].values(value, submission, that);\n        } else if (_.isArray(value)) {\n          // the attribute has multiple values\n          value = value.map(v => keys[attr].values[v]);\n        } else {\n          value = keys[attr].values[value];\n        }\n      }\n\n      // don't need to send null or undefined\n      if (value) {\n        submission.fields[warehouseAttr] = value;\n      }\n    });\n\n    // transform sub models\n    // media does not return any media-models only JSON data about them\n    // media files will be attached separately\n    const [mediaSubmission] = this.media._getSubmission();\n    submission.media = mediaSubmission;\n\n    return [submission, media];\n  },\n\n  /**\n   * Synchronises the model.\n   * @param method\n   * @param model\n   * @param options\n   */\n  sync(method, model, options = {}) {\n    if (options.remote) {\n      return this._syncRemote(method, model, options);\n    }\n\n    return Promise.reject(new Error('Local sync is not possible yet.'));\n  },\n\n  /**\n   * Syncs the record to the remote server.\n   * Returns on success: model, response, options\n   */\n  _syncRemote() {\n    return Promise.reject(new Error('Remote sync is not possible yet.'));\n  },\n\n  _getDefaultMetadata(options) {\n    const metadata = typeof this.metadata === 'function' ? this.metadata() : this.metadata;\n\n    options.metadata = options.metadata || {};\n\n    const today = new Date();\n    const defaults = {\n      training: options.training,\n\n      created_on: today,\n      updated_on: today,\n\n      synced_on: null, // set when fully initialized only\n      server_on: null, // updated on server\n    };\n\n    return $.extend(true, defaults, metadata, options.metadata);\n  },\n});\n\n_.extend(Occurrence.prototype, syncHelpers);\n\n/**\n * Warehouse attributes and their values.\n */\nOccurrence.keys = {\n  taxon: {\n    id: 'taxa_taxon_list_id',\n  },\n  comment: { id: 'comment' },\n};\n\nexport { Occurrence as default };\n","/** *********************************************************************\n * SAMPLE\n *\n * Refers to the event in which the sightings were observed, in other\n * words it describes the place, date, people, environmental conditions etc.\n * Within a sample, you can have zero or more occurrences which refer to each\n * species sighted as part of the sample.\n **********************************************************************/\nimport Backbone from 'backbone';\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport {\n  SYNCHRONISING,\n  CONFLICT,\n  CHANGED_LOCALLY,\n  CHANGED_SERVER,\n  SYNCED,\n  SERVER,\n  LOCAL,\n  API_BASE,\n  API_VER,\n  API_SAMPLES_PATH,\n} from './constants';\nimport helpers from './helpers';\nimport syncHelpers from './sync_helpers';\nimport Media from './Media';\nimport Store from './Store';\nimport Occurrence from './Occurrence';\nimport Collection from './Collection';\n\nconst Sample = Backbone.Model.extend({\n  Media,\n  Occurrence,\n\n  host_url: null, // must be set up for remote sync\n  api_key: null, // must be set up for remote sync\n\n  user: null, // must be set up for remote sync\n  password: null, // must be set up for remote sync\n\n  constructor(attributes = {}, options = {}) {\n    this.id = options.id; // remote ID\n    this.cid = options.cid || helpers.getNewUUID();\n    this.setParent(options.parent || this.parent);\n\n    this.store = options.store || this.store || new Store();\n    this.keys = options.keys || this.keys; // warehouse attribute keys\n\n    if (options.Media) this.Media = options.Media;\n    if (options.Occurrence) this.Occurrence = options.Occurrence;\n    if (options.onSend) this.onSend = options.onSend;\n\n    // remote host defaults\n    this.host_url = options.host_url || this.host_url;\n    this.api_key = options.api_key || this.api_key;\n    this.user = options.user || this.user;\n    this.password = options.password || this.password;\n\n    // attrs\n    this.attributes = {};\n    const defaultAttrs = {\n      date: new Date(),\n      location_type: 'latlon',\n    };\n    let attrs = _.extend(defaultAttrs, attributes);\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n\n    // metadata\n    this.metadata = this._getDefaultMetadata(options);\n\n    this.remote = {}; // for synchronisation state\n\n    // initialise sub models\n    this.occurrences = this._parseModels(options.occurrences, this.Occurrence);\n    this.samples = this._parseModels(options.samples, this.constructor);\n    this.media = this._parseModels(options.media, this.Media);\n\n    this.initialize.apply(this, arguments); // eslint-disable-line\n  },\n\n  /**\n   * Sets parent.\n   * @param parent\n   */\n  setParent(parent) {\n    if (!parent) return;\n\n    const that = this;\n    this.parent = parent;\n    this.parent.on('destroy', () => {\n      that.destroy({ noSave: true });\n    });\n  },\n\n  /**\n   * Adds a subsample to the sample and sets the samples's parent to this.\n   * @param sample\n   */\n  addSample(sample) {\n    if (!sample) return;\n    sample.setParent(this);\n\n    this.samples.push(sample);\n  },\n\n  /**\n   * Adds an occurrence to sample and sets the occurrence's sample to this.\n   * @param occurrence\n   */\n  addOccurrence(occurrence) {\n    if (!occurrence) return;\n    occurrence.setParent(this);\n\n    this.occurrences.push(occurrence);\n  },\n\n  /**\n   * Adds an media to occurrence and sets the media's occurrence to this.\n   * @param media\n   */\n  addMedia(media) {\n    if (!media) return;\n    media.setParent(this);\n    this.media.add(media);\n  },\n\n  // overwrite if you want to validate before saving locally\n  validate(attributes, options = {}) {\n    if (options.remote) {\n      return this.validateRemote(attributes, options);\n    }\n    return null;\n  },\n\n  validateRemote(attributes) {\n    const attrs = _.extend({}, this.attributes, attributes);\n\n    const modelErrors = {};\n    const samples = {};\n    const occurrences = {};\n    const media = {};\n\n    // location\n    if (!attrs.location) {\n      modelErrors.location = \"can't be blank\";\n    }\n\n    // location type\n    if (!attrs.location_type) {\n      modelErrors.location_type = \"can't be blank\";\n    }\n\n    // date\n    if (!attrs.date) {\n      modelErrors.date = \"can't be blank\";\n    } else {\n      const date = new Date(attrs.date);\n      if (date === 'Invalid Date' || date > new Date()) {\n        modelErrors.date = new Date(date) > new Date() ? 'future date' : 'invalid';\n      }\n    }\n\n    // check if has any indirect occurrences\n    if (!this.samples.length && !this.occurrences.length) {\n      modelErrors.occurrences = 'no occurrences';\n    }\n\n    // samples\n    if (this.samples.length) {\n      this.samples.each((model) => {\n        const errors = model.validateRemote();\n        if (errors) {\n          const sampleID = model.cid;\n          samples[sampleID] = errors;\n        }\n      });\n    }\n\n    // occurrences\n    if (this.occurrences.length) {\n      this.occurrences.each((occurrence) => {\n        const errors = occurrence.validateRemote();\n        if (errors) {\n          const occurrenceID = occurrence.cid;\n          occurrences[occurrenceID] = errors;\n        }\n      });\n    }\n\n    // media\n    if (this.media.length) {\n      this.media.each((mediaModel) => {\n        const errors = mediaModel.validateRemote();\n        if (errors) {\n          const mediaID = mediaModel.cid;\n          media[mediaID] = errors;\n        }\n      });\n    }\n\n    const errors = {};\n    if (!_.isEmpty(media)) {\n      errors.media = media;\n    }\n    if (!_.isEmpty(occurrences)) {\n      errors.occurrences = occurrences;\n    }\n    if (!_.isEmpty(samples)) {\n      errors.samples = samples;\n    }\n    if (!_.isEmpty(modelErrors)) {\n      errors.attributes = modelErrors;\n    }\n\n    if (!_.isEmpty(errors)) {\n      return errors;\n    }\n\n    return null;\n  },\n\n  /**\n   * Synchronises the model.\n   * @param method\n   * @param model\n   * @param options\n   */\n  sync(method, model, options = {}) {\n    if (options.remote) {\n      return this._syncRemote(method, model, options);\n    }\n\n    if (!this.store) {\n      return Promise.reject(new Error('Trying to locally sync a model without a store'));\n    }\n\n    try {\n      this.trigger('request', model, null, options);\n    } catch (e) {\n      /* continue on listener error */\n    }\n    return this.store.sync(method, model, options);\n  },\n\n  /**\n   * Syncs the record to the remote server.\n   * Returns on success: model, response, options\n   */\n  _syncRemote(method, model, options) {\n    // Ensure that we have a URL.\n    if (!this.host_url) {\n      return Promise.reject(new Error('A \"url\" property or function must be specified'));\n    }\n\n    model.remote.synchronising = true;\n\n    // model.trigger('request', model, xhr, options);\n    switch (method) {\n      case 'create':\n        return this._create(model, options)\n          .then((val) => {\n            model.remote.synchronising = false;\n            return val;\n          })\n          .catch((err) => {\n            model.remote.synchronising = false;\n            return Promise.reject(err);\n          });\n\n      case 'update':\n        // todo\n        model.remote.synchronising = false;\n        return Promise.reject(new Error('Updating the model is not possible yet.'));\n\n      case 'read':\n        // todo\n        model.remote.synchronising = false;\n        return Promise.reject(new Error('Reading the model is not possible yet.'));\n\n      case 'delete':\n        // todo\n        model.remote.synchronising = false;\n        return Promise.reject(new Error('Deleting the model is not possible yet.'));\n\n      default:\n        model.remote.synchronising = false;\n        return Promise.reject(new Error(`No such remote sync option: ${method}`));\n    }\n  },\n\n  /**\n   * Posts a record to remote server.\n   * @param model\n   * @param options\n   */\n  _create(model, options) {\n    const that = this;\n\n    // async call to get the form data\n    return that._getModelData(model).then(data => that._ajaxModel(data, model, options));\n  },\n\n  _ajaxModel(data, model, options) {\n    const that = this;\n    const promise = new Promise((fulfill, reject) => {\n      // get timeout\n      let timeout = options.timeout || that.timeout || 30000; // 30s\n      timeout = typeof timeout === 'function' ? timeout() : timeout;\n\n      const url = that.host_url + API_BASE + API_VER + API_SAMPLES_PATH;\n      const xhr = (options.xhr = Backbone.ajax({\n        url,\n        type: 'POST',\n        data,\n        headers: {\n          authorization: that.getUserAuth(),\n          'x-api-key': that.api_key,\n        },\n        processData: false,\n        contentType: false,\n        timeout,\n      }));\n\n      xhr.done(responseData => fulfill(responseData));\n\n      xhr.fail((jqXHR, textStatus, errorThrown) => {\n        if (jqXHR.status === 409) {\n          // duplicate occurred - this fixes only occurrence duplicates!\n          // todo: remove once this is sorted\n          const responseData = {\n            data: {\n              id: null,\n              external_key: null,\n              occurrences: [],\n            },\n          };\n\n          jqXHR.responseJSON.errors.forEach((error) => {\n            responseData.data.id = error.sample_id;\n            responseData.data.external_key = error.sample_external_key;\n            responseData.data.occurrences.push({\n              id: error.id,\n              external_key: error.external_key,\n            });\n          });\n\n          fulfill(responseData);\n          return;\n        }\n\n        let error = new Error(errorThrown);\n        if (jqXHR.responseJSON && jqXHR.responseJSON.errors) {\n          const message = jqXHR.responseJSON.errors.reduce(\n            (name, err) => `${name}${err.title}\\n`,\n            ''\n          );\n          error = new Error(message);\n        }\n        try {\n          model.trigger('error:remote', error);\n        } catch (e) {\n          /* continue on listener error */\n        }\n        reject(error);\n      });\n\n      try {\n        model.trigger('request:remote', model, xhr, options);\n      } catch (e) {\n        /* continue on listener error */\n      }\n    });\n\n    return promise;\n  },\n\n  _remoteCreateParse(model, responseData) {\n    // get new ids\n    const remoteIDs = {};\n\n    // recursively extracts ids from collection of response models\n    function getIDs(data) {\n      remoteIDs[data.external_key] = data.id;\n      if (data.samples) data.samples.forEach(subModel => getIDs(subModel));\n      if (data.occurrences) data.occurrences.forEach(subModel => getIDs(subModel));\n      // Images don't store external_keys yet.\n      // if (data.media) data.media.forEach(subModel => getIDs(subModel));\n    }\n\n    getIDs(responseData);\n\n    this._setNewRemoteID(model, remoteIDs);\n  },\n\n  /**\n   * Sets new server IDs to the models.\n   */\n  _setNewRemoteID(model, remoteIDs) {\n    // set new remote ID\n    const remoteID = remoteIDs[model.cid];\n    if (remoteID) {\n      model.id = remoteID;\n    }\n\n    // do that for all submodels\n    if (model.samples) {\n      model.samples.forEach(subModel => this._setNewRemoteID(subModel, remoteIDs));\n    }\n    if (model.occurrences) {\n      model.occurrences.forEach(subModel => this._setNewRemoteID(subModel, remoteIDs));\n    }\n    if (model.media) {\n      model.media.forEach(subModel => this._setNewRemoteID(subModel, remoteIDs));\n    }\n  },\n\n  _getModelData(model) {\n    if (!model) {\n      throw new Error('No model passed to _getModelData.');\n    }\n\n    const that = this;\n\n    // get submission model and all the media\n    const [submission, media] = model._getSubmission();\n    submission.type = 'samples';\n\n    // allow updating the submission data if onSend function is set\n    if (this.onSend) {\n      return this.onSend(submission, media).then((data) => {\n        const [newSubmission, newMedia] = data;\n        return that._normaliseModelData(newSubmission, newMedia);\n      });\n    }\n\n    return this._normaliseModelData(submission, media);\n  },\n\n  /**\n   * Creates a stringified JSON representation of the model or a FormData object.\n   * If the media is present then it creates a FormData so that the record\n   * could be submitted in one call.\n   */\n  _normaliseModelData(submission, media) {\n    // stringify submission\n    const stringSubmission = JSON.stringify({\n      data: submission,\n    });\n\n    // with media send form-data in one request\n    if (media.length) {\n      const formData = new FormData(); // for submission\n      formData.append('submission', stringSubmission);\n      // append media\n      return this._mediaAppend(media, formData).then(() => Promise.resolve(formData));\n    }\n\n    return Promise.resolve(stringSubmission);\n  },\n\n  _mediaAppend(media, formData) {\n    const mediaProcesses = [];\n    media.forEach((mediaModel) => {\n      const imagePromise = new Promise((_fulfill) => {\n        const url = mediaModel.getURL();\n        const type = mediaModel.get('type');\n        const name = mediaModel.cid;\n\n        function onSuccess(err, img, dataURI, blob) {\n          // can provide both image/jpeg and jpeg\n          let extension = type;\n          let mediaType = type;\n          if (type.match(/image.*/)) {\n            extension = type.split('/')[1];\n          } else {\n            mediaType = `image/${mediaType}`;\n          }\n          if (!blob) {\n            blob = helpers.dataURItoBlob(dataURI, mediaType);\n          }\n\n          formData.append(name, blob, `${name}.${extension}`);\n          _fulfill();\n        }\n\n        if (!helpers.isDataURL(url)) {\n          // load image\n          const xhr = new XMLHttpRequest();\n          xhr.open('GET', url, true);\n          xhr.responseType = 'blob';\n          xhr.onload = () => {\n            onSuccess(null, null, null, xhr.response);\n          };\n          // todo check error case\n\n          xhr.send();\n        } else {\n          onSuccess(null, null, url);\n        }\n      });\n      mediaProcesses.push(imagePromise);\n    });\n\n    return Promise.all(mediaProcesses);\n  },\n\n  /**\n   * Returns an object with attributes and their values\n   * mapped for warehouse submission.\n   *\n   * @returns {*}\n   */\n  _getSubmission(options = {}) {\n    const that = this;\n    const sampleKeys = typeof this.keys === 'function' ? this.keys() : this.keys;\n    const keys = $.extend(true, Sample.keys, sampleKeys); // warehouse keys/values to transform\n    let media = [...this.media.models]; // all media within this and child models\n\n    const submission = {\n      id: this.id,\n      external_key: this.cid,\n      survey_id: this.metadata.survey_id,\n      input_form: this.metadata.input_form,\n      fields: {},\n      media: [],\n    };\n\n    // transform attributes\n    Object.keys(this.attributes).forEach((attr) => {\n      // no need to send attributes with no values\n      let value = that.attributes[attr];\n      if (!value) return;\n\n      if (!keys[attr]) {\n        if (attr !== 'email') {\n          console.warn(`Indicia: no such key: ${attr}`);\n        }\n        submission.fields[attr] = value;\n        return;\n      }\n\n      const warehouseAttr = keys[attr].id || attr;\n\n      // check if has values to choose from\n      if (keys[attr].values) {\n        if (typeof keys[attr].values === 'function') {\n          // get a value from a function\n          value = keys[attr].values(value, submission, that);\n        } else if (_.isArray(value)) {\n          // the attribute has multiple values\n          value = value.map(v => keys[attr].values[v]);\n        } else {\n          value = keys[attr].values[value];\n        }\n      }\n\n      // don't need to send null or undefined\n      if (value) {\n        submission.fields[warehouseAttr] = value;\n      }\n    });\n\n    const sampleOptions = _.extend({}, options);\n    this.metadata.training && (sampleOptions.training = this.metadata.training);\n    this.metadata.release_status && (sampleOptions.release_status = this.metadata.release_status);\n    this.metadata.record_status && (sampleOptions.record_status = this.metadata.record_status);\n    this.metadata.sensitive && (sampleOptions.sensitive = this.metadata.sensitive);\n    this.metadata.confidential && (sampleOptions.confidential = this.metadata.confidential);\n    this.metadata.sensitivity_precision &&\n      (sampleOptions.sensitivity_precision = this.metadata.sensitivity_precision);\n\n    // transform sub models\n    // occurrences\n    const [occurrences, occurrencesMedia] = this.occurrences._getSubmission(sampleOptions);\n    submission.occurrences = occurrences;\n    media = media.concat(occurrencesMedia);\n\n    // samples\n    const [samples, samplesMedia] = this.samples._getSubmission(sampleOptions);\n    submission.samples = samples;\n    media = media.concat(samplesMedia);\n\n    // media - does not return any media-models only JSON data about them\n    const [mediaSubmission] = this.media._getSubmission(sampleOptions);\n    submission.media = mediaSubmission;\n\n    return [submission, media];\n  },\n\n  toJSON() {\n    let occurrences;\n    if (!this.occurrences) {\n      occurrences = [];\n      console.warn('toJSON occurrences missing');\n    } else {\n      occurrences = this.occurrences.toJSON();\n    }\n\n    let samples;\n    if (!this.samples) {\n      samples = [];\n      console.warn('toJSON samples missing');\n    } else {\n      samples = this.samples.toJSON();\n    }\n\n    let media;\n    if (!this.media) {\n      media = [];\n      console.warn('toJSON media missing');\n    } else {\n      media = this.media.toJSON();\n    }\n\n    const data = {\n      id: this.id,\n      cid: this.cid,\n      metadata: this.metadata,\n      attributes: this.attributes,\n      occurrences,\n      samples,\n      media,\n    };\n\n    return data;\n  },\n\n  /**\n   * Sync statuses:\n   * synchronising, synced, remote, server, changed_remotely, changed_server, conflict\n   */\n  getSyncStatus() {\n    const meta = this.metadata;\n    // on server\n    if (this.remote.synchronising) {\n      return SYNCHRONISING;\n    }\n\n    if (this.id >= 0) {\n      // fully initialized\n      if (meta.synced_on) {\n        // changed_remotely\n        if (meta.synced_on < meta.updated_on) {\n          // changed_server - conflict!\n          if (meta.synced_on < meta.server_on) {\n            return CONFLICT;\n          }\n          return CHANGED_LOCALLY;\n          // changed_server\n        } else if (meta.synced_on < meta.server_on) {\n          return CHANGED_SERVER;\n        }\n        return SYNCED;\n\n        // partially initialized - we know the record exists on\n        // server but has not yet been downloaded\n      }\n      return SERVER;\n\n      // local only\n    }\n    return LOCAL;\n  },\n\n  /**\n   * Returns child occurrence.\n   * @param index\n   * @returns {*}\n   */\n  getOccurrence(index = 0) {\n    return this.occurrences.at(index);\n  },\n\n  /**\n   * Returns child sample.\n   * @param index\n   * @returns {*}\n   */\n  getSample(index = 0) {\n    return this.samples.at(index);\n  },\n\n  /**\n   * Returns child media.\n   * @param index\n   * @returns {*}\n   */\n  getMedia(index = 0) {\n    return this.media.at(index);\n  },\n\n  getUserAuth() {\n    if (!this.user || !this.password) {\n      return null;\n    }\n\n    const user = typeof this.user === 'function' ? this.user() : this.user;\n    const password = typeof this.password === 'function' ? this.password() : this.password;\n    const basicAuth = btoa(`${user}:${password}`);\n\n    return `Basic  ${basicAuth}`;\n  },\n\n  _parseModels(models, Model) {\n    if (!models) {\n      // init empty samples collection\n      return new Collection([], { model: Model });\n    }\n\n    const that = this;\n\n    const modelsArray = [];\n    _.each(models, (model) => {\n      if (model instanceof Model) {\n        model.setParent(that);\n        modelsArray.push(model);\n      } else {\n        const modelOptions = _.extend(model, { parent: that });\n        const newModel = new Model(model.attributes, modelOptions);\n        modelsArray.push(newModel);\n      }\n    });\n\n    return new Collection(modelsArray, { model: Model });\n  },\n\n  isNew() {\n    return !this.id;\n  },\n\n  // Fetch the model from the server, merging the response with the model's\n  // local attributes. Any changed attributes will trigger a \"change\" event.\n  fetch(options) {\n    const model = this;\n    const promise = new Promise((fulfill, reject) => {\n      options = _.extend({ parse: true }, options);\n      return this.sync('read', this, options)\n        .then((resp) => {\n          // set the returned model's data\n          model.id = resp.id;\n          model.metadata = resp.metadata;\n          if (!model.set(resp.attributes, options)) return false;\n\n          // initialise sub models\n          model.occurrences = model._parseModels(resp.occurrences, model.Occurrence);\n          model.samples = model._parseModels(resp.samples, Sample);\n          model.media = model._parseModels(resp.media, model.Media);\n\n          try {\n            model.trigger('sync', model, resp, options);\n          } catch (e) {\n            /* continue on listener error */\n          }\n\n          fulfill(model);\n          return null;\n        })\n        .catch(reject);\n    });\n\n    return promise;\n  },\n\n  _getDefaultMetadata(options) {\n    const metadata = typeof this.metadata === 'function' ? this.metadata() : this.metadata;\n    const today = new Date();\n    const defaults = {\n      survey_id: options.survey_id,\n      input_form: options.input_form,\n\n      created_on: today,\n      updated_on: today,\n\n      synced_on: null, // set when fully initialized only\n      server_on: null, // updated on server\n    };\n\n    return $.extend(true, defaults, metadata, options.metadata);\n  },\n});\n\n_.extend(Sample.prototype, syncHelpers);\n\n/**\n * Warehouse attributes and their values.\n */\nSample.keys = {\n  date: { id: 'date' },\n  sample_method_id: { id: 'sample_method_id' },\n  location: { id: 'entered_sref' },\n  location_type: {\n    id: 'entered_sref_system',\n    values: {\n      british: 'OSGB', // for British National Grid\n      irish: 'OSIE', // for Irish Grid\n      channel: 'utm30ed50', // for Channel Islands Grid\n      latlon: 4326, // for Latitude and Longitude in decimal form (WGS84 datum)\n    },\n  },\n  form: { id: 'input_form' },\n  group: { id: 'group_id' },\n  comment: { id: 'comment' },\n};\n\nexport { Sample as default };\n","import _ from 'underscore';\nimport Store from './Store';\nimport Collection from './Collection';\nimport Sample from './Sample';\nimport Occurrence from './Occurrence';\nimport Media from './Media';\nimport Report from './Report';\nimport * as CONST from './constants';\n\nconst Indicia = {\n  /* global LIB_VERSION */\n  VERSION: LIB_VERSION, // replaced by build\n\n  Store,\n  Collection,\n\n  Sample,\n  Occurrence,\n  Media,\n  Report,\n};\n\n_.extend(Indicia, CONST);\n\nexport { Indicia as default };\n","import $ from 'jquery';\nimport { API_BASE, API_VER, API_REPORTS_PATH } from './constants';\n\nclass Report {\n  constructor(options = {}) {\n    this.host_url = options.host_url || this.host_url;\n    this.user = options.user || this.user;\n    this.password = options.password || this.password;\n    this.report = options.report || this.report;\n\n    this.api_key = options.api_key || this.api_key;\n    this.params = options.params || this.params;\n    this.timeout = options.timeout || 180000; // 3 min;\n  }\n\n  run(params) {\n    const that = this;\n    const promise = new Promise((fulfill, reject) => {\n      const url = this.host_url + API_BASE + API_VER + API_REPORTS_PATH + this.report;\n\n      params = $.extend(params || that.params, { api_key: that.api_key });\n      $.get({\n        url,\n        data: params,\n        timeout: that.timeout,\n        headers: {\n          authorization: that.getUserAuth(),\n          'x-api-key': that.api_key,\n        },\n        success: fulfill,\n        error: (jqXHR, textStatus, errorThrown) => {\n          let error = new Error(errorThrown);\n          if (jqXHR.responseJSON && jqXHR.responseJSON.errors) {\n            const message = jqXHR.responseJSON.errors.reduce(\n              (name, err) => `${name}${err.title}\\n`,\n              ''\n            );\n            error = new Error(message);\n          }\n          reject(error);\n        },\n      });\n    });\n\n    return promise;\n  }\n\n  getUserAuth() {\n    if (!this.user || !this.password) {\n      return null;\n    }\n\n    const user = typeof this.user === 'function' ? this.user() : this.user;\n    const password = typeof this.password === 'function' ? this.password() : this.password;\n    const basicAuth = btoa(`${user}:${password}`);\n\n    return `Basic  ${basicAuth}`;\n  }\n}\n\nexport default Report;\n"],"names":["Store","options","that","this","localForage","ready","Promise","resolve","reject","_resolve","driverOrder","_typeof","LocalForage","defineDriver","then","dbConfig","name","storeName","version","drivers","_getDriverOrder","DB","createInstance","setDriver","catch","method","model","cid","find","findAll","create","update","destroy","Error","_callWhenReady","Backbone","Collection","models","length","toWait","_","each","collectionModel","store","push","save","all","id","key","_this","setItem","toJSON","_this2","getItem","data","_this3","iterate","value","clone","_this4","removeItem","func","bind","map","driver","INDEXEDDB","WEBSQL","LOCALSTORAGE","_driver","console","error","extend","constructor","prototype","apply","arguments","comparator","a","metadata","created_on","size","collection","sync","fetch","parse","resp","reset","trigger","e","remote","_syncRemote","synchronising","_getSubmission","submission","media","forEach","modelSubmission","modelMedia","concat","_prepareModel","_isModel","attrs","attributes","validationError","getNewUUID","replace","c","r","Math","random","toString","dataURItoBlob","dataURI","fileType","binary","atob","split","array","i","charCodeAt","Blob","Uint8Array","type","isDataURL","string","match","isPlainObject","obj","class2type","types","toLowerCase","String","call","nodeType","isWindow","hasOwn","undefined","isEmptyObject","formatDate","dateToFormat","day","month","date","now","Date","dateArray","test","window","parseInt","getDate","slice","getMonth","getFullYear","helpers","val","wait","validate","set","_validate","isNew","patch","parent","err","_remoteCreateParse","timeNow","server_on","updated_on","synced_on","promise","fulfill","finalise","stopListening","noSave","Media","Model","setParent","defaults","result","changed","initialize","getURL","get","on","resize","MAX_WIDTH","MAX_HEIGHT","args","image","addThumbnail","getDataURI","width","height","validateRemote","errors","isEmpty","syncHelpers","file","FileReader","reader","onload","event","target","Image","src","readAsDataURL","res","canvas","document","createElement","getContext","drawImage","toDataURL","Occurrence","keys","_getDefaultMetadata","mediaArray","modelOptions","addMedia","mediaObj","add","getMedia","index","at","modelErrors","taxon","mediaModel","mediaID","warn","occKeys","$","external_key","fields","training","release_status","record_status","sensitive","confidential","sensitivity_precision","Object","attr","warehouseAttr","values","isArray","v","mediaSubmission","today","comment","Sample","host_url","api_key","user","password","onSend","defaultAttrs","location_type","occurrences","_parseModels","samples","addSample","sample","addOccurrence","occurrence","location","sampleID","occurrenceID","_create","_getModelData","_ajaxModel","timeout","url","xhr","ajax","headers","authorization","getUserAuth","processData","contentType","done","responseData","fail","jqXHR","textStatus","errorThrown","status","responseJSON","sample_id","sample_external_key","message","reduce","title","remoteIDs","getIDs","subModel","_setNewRemoteID","remoteID","newSubmission","newMedia","_normaliseModelData","stringSubmission","JSON","stringify","formData","FormData","append","_mediaAppend","mediaProcesses","imagePromise","_fulfill","onSuccess","img","blob","extension","mediaType","XMLHttpRequest","open","responseType","response","send","sampleKeys","survey_id","input_form","sampleOptions","occurrencesMedia","samplesMedia","getSyncStatus","meta","getOccurrence","getSample","basicAuth","btoa","modelsArray","newModel","sample_method_id","british","irish","channel","latlon","form","group","Indicia","VERSION","Report","report","params","success","CONST"],"mappings":"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"}